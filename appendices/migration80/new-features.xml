<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: $ -->
<!-- EN-Revision: 351949 Maintainer: David Status: ready -->
<!-- Reviewed: no -->
<!-- CREDITS: Dannebicque -->

<sect1 xml:id="migration80.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nouvelles fonctionnalités</title>

 <sect2 xml:id="migration80.new-features.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration80.new-features.core.named-arguments">
   <title>Arguments nommés</title>

   <para>
    <!-- RFC: https://wiki.php.net/rfc/named_params -->
    La prise en charge des <link linkend="functions.named-arguments">Arguments nommés</link> a été ajoutée.
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.attributes">
   <title>Attributs</title>

   <para>
    La prise en charge des <link linkend="language.attributes">Attributs</link> a été ajoutée.
    <!-- RFC: https://wiki.php.net/rfc/attributes_v2 -->
    <!-- RFC: https://wiki.php.net/rfc/attribute_amendments -->
    <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax -->
    <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.property-promotion">
   <title>Promotion de la propriété du constructeur</title>

   <para>
    La prise en charge de la <link linkend="language.oop5.decon.constructor.promotion">promotion 
    des propriétés du constructeur</link> (déclaration des propriétés dans la signature du constructeur) 
    a été ajoutée.
    <!-- RFC: https://wiki.php.net/rfc/constructor_promotion -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.union-types">
   <title>Union de types</title>

   <para>
    La prise en charge des <link linkend="language.types.declarations.union">union de types</link> a été ajoutée.
    <!-- RFC: https://wiki.php.net/rfc/union_types_v2 -->
   </para> 
  </sect3>

  <sect3 xml:id="migration80.new-features.core.match">
   <title>Structure Match</title>

   <para>
    La prise en charge de <link linkend="control-structures.match">l'expression <literal>match</literal></link> 
    a été ajoutée.
    <!-- RFC: https://wiki.php.net/rfc/match_expression_v2 -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.nullsafe-operator">
   <title>Opérateur Nullsafe</title>

   <para>
    La prise en charge de l'<link linkend="language.oop5.basic.nullsafe">opérateur nullsafe</link> (<literal>?-></literal>) a été ajotuée.
    <!-- RFC: https://wiki.php.net/rfc/nullsafe_operator -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.others">
   <title>Autres nouvelles fonctionnalités</title>

   <itemizedlist>
    <listitem>
     <para>
      <!-- we cannot use <classname>WeakMap</classname> because that would link to the wrong class -->
      La classe <literal>WeakMap</literal> a été ajoutée.
      <!-- RFC: https://wiki.php.net/rfc/weak_maps -->
     </para>
    </listitem>
    <listitem>
     <para>
      La classe <classname>ValueError</classname> a été ajoutée.
     </para>
    </listitem>
    <listitem>
     <para>
      N'importe quel nombre de paramètres de fonction peut maintenant être remplacé par un argument "variadique", 
      tant que les types sont compatibles. Par exemple, le code suivant est désormais autorisé:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class A {
     public function method(int $many, string $parameters, $here) {}
}
class B extends A {
     public function method(...$everything) {}
}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      <type>static</type> (comme dans "late static binding") peut désormais être utilisé comme type de retour:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class Test {
     public function create(): static {
          return new static();
     }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/static_return_type -->
     </para>
    </listitem>
    <listitem>
     <para>
      Il est maintenant possible de récupérer le nom de classe d'un objet en utilisant
      <code>$object::class</code>. Le résultat est le même que <code>get_class($object)</code>.
      <!-- RFC: https://wiki.php.net/rfc/class_name_literal_on_object -->
     </para>
    </listitem>
    <listitem>
     <para>
      &new; et &instanceof; peut maintenant être utilisé avec des expressions arbitraires, en utilisant 
      <code>new (expression)(...$args)</code> et <code>$obj instanceof (expression)</code>.
      <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
     </para>
    </listitem>
    <listitem>
     <para>
      Quelques corrections de cohérence à la syntaxe des variables ont été appliquées, par exemple l'écriture
      <code>Foo::BAR::$baz</code> est désormais autorisée.
      <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
     </para>
    </listitem>
    <listitem>
     <para>
      Ajout de l'interface <interfacename>Stringable</interfacename> qui est automatiquement implémentée 
      si une classe définit une méthode <link linkend="object.tostring">__toString()</link>.
      <!-- RFC: https://wiki.php.net/rfc/stringable -->
     </para>
    </listitem>
    <listitem>
     <para>
      Les traits peuvent désormais définir des méthodes privées abstraites. Ces méthodes doivent 
      être implémentées par la classe utilisant le trait..
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>throw</literal> peut maintenant être utilisé comme une expression. Cela permet des 
      utilisations comme:
      <programlisting role="php">
<![CDATA[
<?php
$fn = fn() => throw new Exception('Exception in arrow function');
$user = $session->user ?? throw new Exception('Must have user');
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/throw_expression -->
     </para>
    </listitem>
    <listitem>
     <para>
      Une virgule de fin facultative est désormais autorisée dans les listes de paramètres.
      <programlisting role="php">
<![CDATA[
<?php
function functionWithLongSignature(
    Type1 $parameter1,
    Type2 $parameter2, // <-- This comma is now allowed.
) {
}
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/trailing_comma_in_parameter_list -->
     </para>
    </listitem>
    <listitem>
     <para>
      Il est désormais possible d'écrire <code>catch (Exception)</code> pour intercepter une exception 
      sans la stocker dans une variable.
      <!-- RFC: https://wiki.php.net/rfc/non-capturing_catches -->
     </para>
    </listitem>
    <listitem>
     <para>
      La prise en charge du type <type>mixed</type> a été ajoutée.
      <!-- RFC: https://wiki.php.net/rfc/mixed_type_v2 -->
     </para>
    </listitem>
    <listitem>
     <para>
      Les méthodes privées déclarées sur une classe parente n'appliquent plus de règles d'héritage sur 
      les méthodes d'une classe enfant (à l'exception des constructeurs privés finaux). 
      L'exemple suivant illustre les restrictions qui ont été supprimées:
      <programlisting role="php">
<![CDATA[
<?php
class ParentClass {
    private function method1() {}
    private function method2() {}
    private static function method3() {}
    // Throws a warning, as "final" no longer has an effect:
    private final function method4() {}
}
class ChildClass extends ParentClass {
    // All of the following are now allowed, even though the modifiers aren't
    // the same as for the private methods in the parent class.
    public abstract function method1() {}
    public static function method2() {}
    public function method3() {}
    public function method4() {}
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      <function>get_resource_id</function> a été ajouté, qui renvoie la même valeur que
      <code>(int) $resource</code>. Il fournit la même fonctionnalité sous une API plus claire.
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.new-features.date">
  <title>Date et Heure</title>
  
  <itemizedlist>
   <listitem>
    <para>
     <methodname>DateTime::createFromInterface</methodname> et
     <methodname>DateTimeImmutable::createFromInterface</methodname> ont été ajoutés.
    </para>
   </listitem>
   <listitem>
    <para>
     Le spécificateur de format DateTime <literal>p</literal> a été ajouté, qui est le même 
     que <literal>P</literal> mais renvoie <literal>Z</literal> plutôt que <literal>+00:00</literal> 
     pour UTC.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.dom">
  <title>DOM</title>

  <para>
   <interfacename>DOMParentNode</interfacename> et <interfacename>DOMChildNode</interfacename> avec de 
   nouvelles API de traversée et de manipulation ont été ajoutés.
   <!-- RFC: https://wiki.php.net/rfc/dom_living_standard_api-->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.filter">
  <title>Filter</title>

  <para>
   <constant>FILTER_VALIDATE_BOOL</constant> a été ajouté comme alias pour
   <constant>FILTER_VALIDATE_BOOLEAN</constant>. Le nouveau nom est préférable, car il utilise le nom 
   de type canonique.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.enchant">
  <title>Enchant</title>

  <para>
   <function>enchant_dict_add</function>, <function>enchant_dict_is_added</function>, et
   <constant>LIBENCHANT_VERSION</constant> ont été ajoutés.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.fpm">
  <title>FPM</title>

  <para>
   Ajout d'une nouvelle option <literal>pm.status_listen</literal> qui permet d'obtenir l'état à partir 
   de différents points de terminaison (par exemple, un port ou un fichier UDS), ce qui est utile pour 
   obtenir l'état lorsque tous les enfants sont occupés à traiter des requêtes de longue durée.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.hash">
  <title>Hash</title>

  <para>
   Les objets <classname>HashContext</classname> peuvent maintenant être sérialisés.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.intl">
  <title>Fonctions d'internationalisation</title>

  <para>
   Les constantes <constant>IntlDateFormatter::RELATIVE_FULL</constant>,
   <constant>IntlDateFormatter::RELATIVE_LONG</constant>,
   <constant>IntlDateFormatter::RELATIVE_MEDIUM</constant>, et
   <constant>IntlDateFormatter::RELATIVE_SHORT</constant>
   ont été ajoutées.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.ldap">
  <title>LDAP</title>

  <para>
   <function>ldap_count_references</function> a été ajouté, et renvoie le nombre de messages de référence 
   dans un résultat de recherche.
  </para>
 </sect2>
 <sect2 xml:id="migration80.new-features.opcache">
  <title>OPcache</title>

  <para>
   Si le paramètre ini <!--<link linkend="ini.opcache.record-warnings">-->opcache.record_warnings<!--</link>--> 
   est activé, OPcache enregistrera les avertissements lors de la compilation et les rejouera lors de 
   l'inclusion suivante, même s'il est servi depuis le cache.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.openssl">
  <title>OpenSSL</title>

  <para>
   Ajout de la prise en charge de la syntaxe des messages cryptographiques (CMS) (
   <link xlink:href="&url.rfc;5652">RFC 5652</link>) composée de fonctions de cryptage, décryptage, 
   signature, vérification et lecture. L'API est similaire à l'API pour les fonctions PKCS # 7 
   avec un ajout de nouvelles constantes de codage:
   <constant>OPENSSL_ENCODING_DER</constant>, <constant>OPENSSL_ENCODING_SMIME</constant>
   and <constant>OPENSSL_ENCODING_PEM</constant>:
   <simplelist>
    <member>
     <function>openssl_cms_encrypt</function> crypte le message dans le fichier avec les certificats et 
     renvoie le résultat dans le fichier fourni.
    </member>
    <member>
     <function>openssl_cms_decrypt</function> qui déchiffre le message S/MIME dans le fichier et renvoie 
     les résultats dans le fichier fourni.
    </member>
    <member>
     <function>openssl_cms_read</function> qui exporte le fichier CMS vers un tableau de certificats PEM..
    </member>
    <member>
     <function>openssl_cms_sign</function> qui signe le message MIME dans le fichier avec un certificat 
     et une clé et affiche le résultat dans le fichier fourni.
    </member>
    <member>
     <function>openssl_cms_verify</function> qui vérifie que le bloc de données est intact, que le 
     signataire est bien qui il prétend être, et renvoie les certificats des signataires.
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.pcre">
  <title>Expressions régulières (compatibles Perl)</title>

  <para>
   <function>preg_last_error_msg</function> a été ajouté, et renvoie un message lisible par l'homme 
   pour la dernière erreur PCRE. Il complète <function>preg_last_error</function>, qui renvoie à la 
   place une valeur d'énumération entière.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.reflection">
  <title>Reflection</title>

  <itemizedlist>
   <listitem>
    <para>
     Les méthodes suivantes peuvent désormais renvoyer des informations sur les valeurs par 
     défaut des paramètres des fonctions internes:
    </para>
    <para>
     <simplelist>
      <member><methodname>ReflectionParameter::isDefaultValueAvailable</methodname></member>
      <member><methodname>ReflectionParameter::getDefaultValue</methodname></member>
      <member><methodname>ReflectionParameter::isDefaultValueConstant</methodname></member>
      <member><methodname>ReflectionParameter::getDefaultValueConstantName</methodname></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   <methodname>SQLite3::setAuthorizer</methodname> et les constantes de classe respectives ont été 
   ajoutées pour définir un callback userland qui sera utilisé pour autoriser ou non une action 
   sur la base de données.
   <!-- PR: https://github.com/php/php-src/pull/4797 -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.standard">
  <title>Bibliothèque standard </title>

  <itemizedlist>
   <listitem>
    <para>
     <function>str_contains</function>, <function>str_starts_with</function> et
     <function>str_ends_with</function> ont été ajoutés, qui vérifient si <parameter>haystack</parameter> 
     contient, commence par ou se termine par <parameter>needle</parameter>, respectivement.
     <!-- RFC: https://wiki.php.net/rfc/str_contains -->
     <!-- RFC: https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>fdiv</function> a été ajouté, et effectue une division en virgule flottante sous la sémantique 
     IEEE 754. La division par zéro est considérée comme bien définie et renverra l'un de 
     <literal>Inf</literal>, <literal>-Inf</literal> ou <literal>NaN</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>get_debug_type</function> a été ajouté, ry renvoie un type utile pour les messages d'erreur.
     Contrairement à <function>gettype</function>, il utilise des noms de type canoniques, retourne les 
     noms de classe pour les objets et indique le type de ressource pour les ressources.
     <!-- RFC: https://wiki.php.net/rfc/get_debug_type -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>printf</function> et ses amis prennent désormais en charge les spécificateurs de format
     <literal>%h</literal> et %<literal>%H</literal>. Ce sont les mêmes que <literal>%g</literal> et
     <literal>%G</literal>, mais ils utilisent toujours <literal>"."</literal> comme séparateur décimal,
     plutôt que de le déterminer via les paramètres régionaux <constant>LC_NUMERIC</constant>.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>printf</function> et ses amis prennent désormais en charge l'utilisation <literal>"*"</literal> 
     de la taille ou de la précision, auquel cas la taille/précision est transmise comme argument à printf. 
     Cela permet également d'utiliser la précision <literal>-1</literal> avec <literal>%g</literal>,
     <literal>%G</literal>, <literal>%h</literal> et <literal>%H</literal>. Par exemple, le code suivant 
     peut être utilisé pour reproduire le formatage en virgule flottante par défaut de PHP:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
printf("%.*H", (int) ini_get("precision"), $float);
printf("%.*H", (int) ini_get("serialize_precision"), $float);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>proc_open</function> prend désormais en charge les descripteurs de pseudo-terminaux (PTY). 
     Les attaches suivantes <literal>stdin</literal>, <literal>stdout</literal> et <literal>stderr</literal> 
     avec le même PTY:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['pty'], ['pty'], ['pty']], $pipes);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>proc_open</function> prend désormais en charge les descripteurs de paires de sockets. 
     Ce qui suit fixe une paire de sockets distinct des <literal>stdin</literal>, <literal>stdout</literal> 
     et <literal>stderr</literal>:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['socket'], ['socket'], ['socket']], $pipes);
?>
]]>
     </programlisting>
    </para>
    <para>
     Contrairement aux canaux, les sockets ne souffrent pas de problèmes d'E/S bloquants sous Windows. 
     Cependant, tous les programmes peuvent ne pas fonctionner correctement avec les sockets stdio.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions de tri sont désormais stables, ce qui signifie que les éléments de comparaison égale 
     conserveront leur ordre d'origine.
     <!-- RFC: https://wiki.php.net/rfc/stable_sorting -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>array_diff</function>, <function>array_intersect</function> et leurs variations peuvent 
     maintenant être utilisés avec un seul tableau comme argument. Cela signifie que des utilisations telles 
     que les suivantes sont désormais possibles:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
// OK même si $excludes est vide:
array_diff($array, ...$excludes);
// OK même si $arrays contient seulement un seul tableau:
array_intersect(...$arrays);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     Le paramètre <parameter>flag</parameter> de <function>ob_implicit_flush</function> a été modifié pour 
     accepté un <type>bool</type> plutôt qu'un <type>int</type>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.tokenizer">
  <title>Tokenizer</title>

  <para>
   <classname>PhpToken</classname> ajoute une interface basée sur des objets au tokenizer. Il offre 
   une représentation plus uniforme et ergonomique, tout en étant plus efficace en mémoire et 
   plus rapide.
   <!--  RFC: https://wiki.php.net/rfc/token_as_object -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.zip">
  <title>Zip</title>

  <itemizedlist>
   <listitem>
    <para>
     L'extension Zip a été mise à jour vers la version 1.19.1.
    </para>
   </listitem>
   <listitem>
    <para>
     Nouvelles méthodes <methodname>ZipArchive::setMtimeName</methodname> et
     <methodname>ZipArchive::setMtimeIndex</methodname> our définir l'heure de modification d'une entrée..
    </para>
   </listitem>
   <listitem>
    <para>
     Nouvelle méthode <methodname>ZipArchive::registerProgressCallback</methodname> pour fournir des 
     mises à jour lors de la fermeture de l'archive.
    </para>
   </listitem>
   <listitem>
    <para>
     Nouvelle méthode <methodname>ZipArchive::registerCancelCallback</methodname> pour permettre l'annulation 
     lors de la fermeture de l'archive.
    </para>
   </listitem>
   <listitem>
    <para>
     Nouvelle méthode <methodname>ZipArchive::replaceFile</methodname> pour remplacer le contenu d'une entrée.
    </para>
   </listitem>
   <listitem>
    <para>
     Nouvelle méthode <methodname>ZipArchive::isCompressionMethodSupported</methodname> pour vérifier les
     fonctionnalités de compression optionnelles.
    </para>
   </listitem>
   <listitem>
    <para>
     Nouvelle méthode <methodname>ZipArchive::isEncryptionMethodSupported</methodname> pour vérifier les
     fonctionnalités de chiffrement facultatives.
    </para>
   </listitem>
   <listitem>
    <para>
     La propriété <varname>ZipArchive::lastId</varname> pour obtenir la valeur d'index de la dernière 
     entrée ajoutée a été ajoutée.
    </para>
   </listitem>
   <listitem>
    <para>
     Les erreurs peuvent maintenant être vérifiées après la fermeture d'une archive en utilisant les propriétés
     <varname>ZipArchive::status</varname> et
     <varname>ZipArchive::statusSys</varname>, ou la méthode
     <methodname>ZipArchive::getStatusString</methodname>.
    </para>
   </listitem>
   <listitem>
    <para>
     L'option <literal>'remove_path'</literal> de <methodname>ZipArchive::addGlob</methodname> et
     <methodname>ZipArchive::addPattern</methodname> est maintenant traitée comme un préfixe de chaîne 
     arbitraire (par soucis de cohérence avec l'option <literal>'add_path'</literal>), alors qu'autrefois 
     elle était traitée comme un nom de répertoire.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctionnalités facultatives de compression/chiffrement sont maintenant répertoriées dans phpinfo.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
