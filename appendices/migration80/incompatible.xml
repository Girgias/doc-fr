<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: $ -->
<!-- EN-Revision: 352038 Maintainer: David Status: ready -->
<!-- Reviewed: no -->
<!-- CREDITS: Dannebicque -->

<sect1 xml:id="migration80.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Changements incompatible avec les versions précédentes</title>

 <sect2 xml:id="migration80.incompatible.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration80.incompatible.core.string-number-comparision">
   <title>Comparaison des chaînes de caractères et des nombres</title>

   <para>
    Les comparaisons non strictes entre les nombres et les chaînes non numériques fonctionnent désormais en 
    convertissant le nombre en string et en comparant les chaînes. Les comparaisons entre les nombres et les 
    chaînes numériques continuent d'être réalisées comme avant. Notamment, cela signifie que
    <code>0 == "pas-un-nombre"</code> est considéré comme faux maintenant.
    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Comparaison</entry>
        <entry>Avant</entry>
        <entry>Après</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><code>0 == "0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "0.0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>0 == ""</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>42 == "   42"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>42 == "42foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <!-- RFC: https://wiki.php.net/rfc/string_to_number_comparison -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.incompatible.core.other">
   <title>Autres changements incompatibles</title>

   <itemizedlist>
    <listitem>
     <para>
      <literal>match</literal> est maintenant un mot réservé.
     </para>
    </listitem>
    <listitem>
     <para>
      Les échecs d'assertion sont désormais lancés par défaut. Si l'ancien comportement est souhaité,
      <code>assert.exception=0</code> doit être défini dans les paramètres INI.
     </para>
    </listitem>
    <listitem>
     <para>
      Les méthodes avec le même nom que la classe ne sont plus interprétées comme des constructeurs. 
      La méthode <link linkend="object.construct">__construct()</link> doit être utilisée à la place.
     </para>
    </listitem>
    <listitem>
     <para>
      La possibilité d'appeler des méthodes non statiques de manière statique a été supprimée. Donc
      <function>is_callable</function> échouera lors de la recherche d'une méthode non statique avec 
      un nom de classe (doit être vérifié avec une instance d'objet)..
     </para>
    </listitem>
    <listitem>
     <para>
      Les conversions <code>(real)</code> et <code>(unset)</code> ont été retirées.
     </para>
    </listitem>
    <listitem>
      <para>
       La directive <link linkend="ini.track-errors">track_errors</link> a été retirée. 
       Cela signifie que <varname>php_errormsg</varname> n'estplus disponible. La fonction
       <function>error_get_last</function> doit être utilisée à la place.
      </para>
    </listitem>
    <listitem>
     <para>
      La possibilité de définir des constantes insensibles à la casse a été supprimée. 
      Le troisième argument de <function>define</function> peut ne plus être &true;.
     </para>
    </listitem>
    <listitem>
     <para>
      La possibilité de spécifier un chargeur automatique à l'aide d'une fonction 
      <function>__autoload</function> a été supprimée. 
      <function>spl_autoload_register</function> doit être utilisé à la place.
     </para>
    </listitem>
    <listitem>
     <para>
      L'argument <parameter>errcontext</parameter> ne sera plus transmis aux gestionnaires d'erreurs 
      personnalisés définis avec <function>set_error_handler</function>.
     </para>
    </listitem>
    <listitem>
     <para>
      <function>create_function</function>a été retiré. Les fonctions anonymes peuvent être 
      utilisées à la place.
     </para>
    </listitem>
    <listitem>
     <para>
      <function>each</function> a été retiré. &foreach; ou <classname>ArrayIterator</classname>
      doit être utilisé à la place.
     </para>
    </listitem>
    <listitem>
     <para>
      La possibilité de dissocier <varname>this</varname> des fermetures créées à partir d'une 
      méthode en utilisant <methodname>Closure::fromCallable</methodname> ou
      <methodname>ReflectionMethod::getClosure</methodname>, a été retirée.
     </para>
    </listitem>
    <listitem>
     <para>
      La possibilité de dissocier <varname>this</varname> des fermetures appropriées qui contiennent 
      des utilisations de <varname>this</varname> a également été retiré.
     </para>
    </listitem>
    <listitem>
     <para>
      La possibilité d'utiliser <function>array_key_exists</function> avec des objets a été retiré.
      <function>isset</function> ou <function>property_exists</function> peuvent être utilisés à la place.
     </para>
    </listitem>
    <listitem>
     <para>
      Le comportement de <function>array_key_exists</function> concernant le type du paramètre
      <parameter>key</parameter> a été rendu cohérent avec <function>isset</function> et
      un accès normal au tableau. Tous les types de clés utilisent maintenant les coercitions habituelles 
      et les clés de tableau/objet lancent un <classname>TypeError</classname>.
     </para>
    </listitem>
    <listitem>
     <para>
      Tout tableau comportant un nombre <replaceable>n</replaceable> comme sa première clé numérique va utiliser 
      <replaceable>n+1</replaceable> pour sa prochaine clé implicitement, même si  <replaceable>n</replaceable> 
      est négatif.
      <!-- RFC: https://wiki.php.net/rfc/negative_array_index -->
     </para>
    </listitem>
    <listitem>
     <para>
      Le niveau par défait de error_reporting est maintenant <constant>E_ALL</constant>. Précédemment il excluait
      <constant>E_NOTICE</constant> et <constant>E_DEPRECATED</constant>.
     </para>
    </listitem>
    <listitem>
     <para>
      <link linkend="ini.display-startup-errors">display_startup_errors</link> est maintenant activé par défaut.
     </para>
    </listitem>
    <listitem>
     <para>
      Utiliser <type>parent</type> à l'intérieur d'une classe qui n'a pas de parent, va provoquer un erreur 
      fatale de compiltation.
     </para>
    </listitem>
    <listitem>
     <para>
      L'opérateur <literal>@</literal> ne metrta plus les erreurs fatales en silence.
      (<constant>E_ERROR</constant>, <constant>E_CORE_ERROR</constant>,
      <constant>E_COMPILE_ERROR</constant>, <constant>E_USER_ERROR</constant>,
      <constant>E_RECOVERABLE_ERROR</constant>, <constant>E_PARSE</constant>). Le gestionnaires d'erreurs
       s'attend à ce que error_reporting soit <literal>0</literal> quand <literal>@</literal> est utilisé, et 
      devrait être ajusté pour utiliser une vérification de masque à la place :
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Replace
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (error_reporting() == 0) {
        return; // Silenced
    }
    // ...
}

// With
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (!(error_reporting() & $err_no)) {
        return; // Silenced
    }
    // ...
}
?>
]]>
      </programlisting>
     </para>
     <para>
      De plus, il faut veiller à ce que les messages d'erreur ne soient pas affichés en environnements 
      de production, ce qui peut entraîner des fuites d'informations. Veuillez vous assurer que
       <code>display_errors=Off</code> est utilisé en conjonction avec la journalisation des erreurs.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>#[</literal> n'est plus interprété comme le début d'un commentaire,
       car cette syntaxe est désormais utilisée pour les attributs.
      <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
     </para>
    </listitem>
    <listitem>
     <para>
      Les erreurs d'héritage dues à des signatures de méthode incompatibles (violations de LSP) vont 
      désormais toujours générer une erreur fatale. Auparavant, un avertissement était généré dans 
      certains cas.
      <!-- RFC: https://wiki.php.net/rfc/lsp_errors -->
     </para>
    </listitem>
    <listitem>
     <para>
      La priorité de l'opérateur de concaténation a changé par rapport aux décalages de bits et à 
      l'addition ainsi que pour la soustraction.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
echo "Sum: " . $a + $b;
// was previously interpreted as:
echo ("Sum: " . $a) + $b;
// is now interpreted as:
echo "Sum:" . ($a + $b);
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/concatenation_precedence -->
     </para>
    </listitem>
    <listitem>
     <para>
      Un argument avec une valeur par défaut qui se résout en &null; au moment de l'exécution ne marquera 
      plus implicitement le type d'argument comme nullable. Soit un type Nullable explicite, soit une 
      valeur par défaut &null; explicite doit être utilisée à la place.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Replace
function test(int $arg = CONST_RESOLVING_TO_NULL) {}
// With
function test(?int $arg = CONST_RESOLVING_TO_NULL) {}
// Or
function test(int $arg = null) {}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      Un certain nombre d'avertissements ont été convertis en exception <classname>Error</classname>:
     </para>
     <para>
      <simplelist>
       <member>
        Tentative d'écriture dans une propriété d'un non-objet. Auparavant cela
         créé implicitement un objet stdClass pour les chaînes nulles, fausses et vides.
       </member>
       <member>
        Tentative d'ajout d'un élément à un tableau pour lequel la clé PHP_INT_MAX
         est déjà utilisé.
       </member>
       <member>
        Tentative d'utilisation d'un type non valide (tableau ou objet) comme clé de tableau ou
         offset de chaîne.
       </member>
       <member>Tentative d'écriture dans un index de tableau d'une valeur scalaire.</member>
       <member>Tentative de depaquetage d'un array/Traversable.</member>
       <member>
        Tentative d'accès à des constantes non qualifiées qui ne sont pas définies.
        Auparavant, les accès à des constantes non qualifiées entraînaient un avertissement et étaient interprétés comme des chaînes.
       </member>
      </simplelist>
     </para>
     <para>
      Un certain nombre de "notice" ont été convertis en avertissements:
     </para>
     <para>
      <simplelist>
       <member>Tentative de lecture d'une variable non définie.</member>
       <member>Tentative de lecture d'une propriété non définie.</member>
       <member>Tentative de lecture d'une clé de tableau non définie.</member>
       <member>Tentative de lecture d'une propriété d'un non-objet.</member>
       <member>Tentative d'accès à un index de tableau d'un non-tableau.</member>
       <member>Tentative de conversion d'un tableau en chaîne.</member>
       <member>Tentative d'utilisation d'une ressource comme clé de tableau.</member>
       <member>Tentative d'utilisation de null, d'un booléen ou d'un flottant comme décalage de chaîne.</member>
       <member>Tentative de lecture d'un décalage de chaîne hors limites.</member>
       <member>Tentative d'attribution d'une chaîne vide à un décalage de chaîne.</member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/engine_warnings -->
     </para>
    </listitem>
    <listitem>
     <para>
      Tenter d'affecter plusieurs octets à un décalage de chaîne émettra désormais un avertissement.
     </para>
    </listitem>
    <listitem>
     <para>
      Les caractères inattendus dans les fichiers source (tels que les octets NUL en dehors 
      des chaînes) entraîneront désormais un
       exception <classname>ParseError</classname> au lieu d'un avertissement de compilation.
     </para>
    </listitem>
    <listitem>
     <para>
      Les exceptions non interceptées passent désormais par un "arrêt propre", ce qui signifie 
      que les destructeurs seront appelés après une exception non interceptée.
     </para>
    </listitem>
    <listitem>
     <para>
      L'erreur fatale à la compilation "Only variables can be passed by reference" a été retardée jusqu'à 
      l'éxécution, et converti en une exception "Argument cannot be passed by reference" 
      <classname>Error</classname>.
     </para>
    </listitem>
    <listitem>
     <para>
      Certaines notices "Only variables should be passed by reference" ont été convertis en exception "Argument
      cannot be passed by reference".
     </para>
    </listitem>
    <listitem>
     <para>
      Le nom généré pour les classes anonymes a changé. Il comprendra désormais le nom du premier
       parent ou interface:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
new class extends ParentClass {};
// -> ParentClass@anonymous
new class implements FirstInterface, SecondInterface {};
// -> FirstInterface@anonymous
new class {};
// -> class@anonymous
?>
]]>
      </programlisting>
     </para>
     <para>
      Le nom indiqué ci-dessus est toujours suivi d'un octet NUL et d'un suffixe unique.
     </para>
    </listitem>
    <listitem>
     <para>
      Les références de méthode de trait non absolues dans les adaptations d'alias de trait doivent maintenant être
       non ambigu:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class X {
    use T1, T2 {
        func as otherFunc;
    }
    function func() {}
}
?>
]]>
      </programlisting>
     </para>
     <para>
      Si les deux <code>T1::func()</code> et <code>T2::func()</code> existent, ce code était auparavant silencieusement 
      accepté, et func était supposé faire référence à <code>T1::func</code>. Maintenant, il générera une erreur 
      fatale à la place et soit <code>T1::func</code> soit <code>T2::func</code> doit être écrit explicitement.
     </para>
    </listitem>
    <listitem>
     <para>
      La signature des méthodes abstraites définies dans les traits est maintenant vérifiée par rapport 
      à la méthode de classe d'implémentation:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
trait MyTrait {
    abstract private function neededByTrait(): string;
}

class MyClass {
    use MyTrait;

    // Error, because of return type mismatch.
    private function neededByTrait(): int { return 42; }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
      Les fonctions désactivées sont désormais traitées exactement comme des fonctions inexistantes. 
      L'appel d'une fonction désactivée la signale comme inconnue et la redéfinition d'une fonction 
      désactivée est désormais possible.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>data://</literal> les wrappers de flux ne sont plus accessibles en écriture, ce qui 
      correspond au comportement documenté.
     </para>
    </listitem>
    <listitem>
     <para>
      Les opérateurs arithmétiques et binaires <literal>+</literal>, <literal>-</literal>,
      <literal>*</literal>, <literal>/</literal>, <literal>**</literal>, <literal>%</literal>,
      <literal>&lt;&lt;</literal>, <literal>&gt;&gt;</literal>, <literal>&amp;</literal>,
      <literal>|</literal>, <literal>^</literal>, <literal>~</literal>, <literal>++</literal>,
      <literal>--</literal> vont maintenant lever une <classname>TypeError</classname> quand l'une des 
      opérandes est un &array;, &resource; ou un &object; non surchargé. La seule exception à cette 
      règle est l'opération de fusuon de tableau <literal>+</literal> qui reste prise en charge.
      <!-- RFC: https://wiki.php.net/rfc/arithmetic_operator_type_checks -->
     </para>
    </listitem>
    <listitem>
     <para>
      Le transtypage flottant en chaîne de caractères se comportera désormais toujours indépendamment 
      des paramètres régionaux.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
setlocale(LC_ALL, "de_DE");
$f = 3.14;
echo $f, "\n";
// Previously: 3,14
// Now:        3.14
?>
]]>
      </programlisting>
     </para>
     <para>
      Voir <function>printf</function>, <function>number_format</function> et
      <methodname>NumberFormatter</methodname> pour savoir comment personnaliser le formatage des nombres.
      <!-- RFC: https://wiki.php.net/rfc/locale_independent_float_to_string -->
     </para>
    </listitem>
    <listitem>
     <para>
      La prise en charge des accolades obsolètes pour l'accès indexé a été supprimée.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Instead of:
$array{0};
$array{"key"};
// Write:
$array[0];
$array["key"];
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/deprecate_curly_braces_array_access -->
     </para>
    </listitem>
    <listitem>
     <para>
      L'application du modificateur final à une méthode privée produira désormais un avertissement à 
      moins que cette méthode ne soit le constructeur.
      <!-- FC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      Si un constructeur d'objet <function>exit</function>s, le destructeur d'objet ne sera plus appelé.
      Cela correspond au comportement lorsque le constructeur est déclenché.
     </para>
    </listitem>
    <listitem>
     <para>
      Les espaces de noms ne peuvent plus contenir d'espaces blancs: bien que <code>Foo\Bar</code> soit 
      reconnu comme un espace de nom , <code>Foo \ Bar</code> ne le sera plus. Inversement, les mots-clés 
      réservés sont désormais autorisés en tant que segments d'espace de noms, ce qui peut également modifier 
      l'interprétation du code: <code>new\x</code> est désormais identique à <code>constant('new\x')</code>, 
      pas new <code>new \x()</code>.
      <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
     </para>
    </listitem>
    <listitem>
     <para>
      Les écritures ternaires imbriqués nécessitent désormais des parenthèses explicites.
      <!-- RFC: https://wiki.php.net/rfc/ternary_associativity -->
     </para>
    </listitem>
    <listitem>
     <para>
      <function>debug_backtrace</function> et <methodname>Exception::getTrace</methodname> ne fourniront 
      plus de références aux arguments. Il ne sera pas possible de modifier les arguments de la fonction 
      via la trace inverse.
     </para>
    </listitem>
    <listitem>
     <para>
      La gestion des chaînes numériques a été modifiée pour être plus intuitive et moins sujette aux erreurs. 
      Les espaces blancs de fin sont désormais autorisés dans les chaînes numériques par souci de cohérence a
      vec le traitement des espaces blancs de début. Cela affecte principalement:
     </para>
     <para>
      <simplelist>
       <member>La fonction <function>is_numeric</function></member>
       <member>Les comparaisons chaîne à chaîne</member>
       <member>Les déclarations de type</member>
       <member>Les opérations d'incrémentation et de décrémentation</member>
      </simplelist>
     </para>
     <para>
      Le concept de "chaîne numérique de début" a été généralement abandonné; les cas où cela reste encore 
      possibles le sont pour faciliter la migration. Les chaînes qui ont émis un <constant>E_NOTICE</constant> 
      "A non well-formed numeric value encountered" émettront désormais un <constant>E_WARNING</constant> "A
      non-numeric value encountered" et toutes les chaînes qui ont émis un <constant>E_WARNING</constant> "A
      non-numeric value encountered" lèveront désormais un <classname>TypeError</classname>. 
      Cela affecte principalement:
     </para>
     <para>
      <simplelist>
       <member>Les opérations arithmétiques</member>
       <member>Les oéprations binaires</member>
      </simplelist>
     </para>
     <para>
      Ce changement de <constant>E_WARNING</constant> à <classname>TypeError</classname> affecte également le
      <constant>E_WARNING</constant> "Illegal string offset 'string'" pour les index de chaînes illégaux. Le 
      comportement des transtypages explicites en int/float à partir de chaînes n'a pas été modifié.
      <!-- RFC: https://wiki.php.net/rfc/saner-numeric-strings -->
     </para>
    </listitem>
    <listitem>
     <para>
      Les méthodes magiques verront désormais leurs arguments et types de retour vérifiés s'ils les ont déclarés. 
      Les signatures doivent correspondre à la liste suivante:
     </para>
     <para>
      <simplelist>
       <member><code>__call(string $name, array $arguments): mixed</code></member>
       <member><code>__callStatic(string $name, array $arguments): mixed</code></member>
       <member><code>__clone(): void</code></member>
       <member><code>__debugInfo(): ?array</code></member>
       <member><code>__get(string $name): mixed</code></member>
       <member><code>__invoke(mixed $arguments): mixed</code></member>
       <member><code>__isset(string $name): bool</code></member>
       <member><code>__serialize(): array</code></member>
       <member><code>__set(string $name, mixed $value): void</code></member>
       <member><code>__set_state(array $properties): object</code></member>
       <member><code>__sleep(): array</code></member>
       <member><code>__unserialize(array $data): void</code></member>
       <member><code>__unset(string $name): void</code></member>
       <member><code>__wakeup(): void</code></member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/magic-methods-signature -->
     </para>
    </listitem>
    <listitem>
     <para>
      Les clés du tableau <function>call_user_func_array</function> seront désomrmais interprétées comme 
      des noms de paramètres, au lieu d'être ignorées en silence.
     </para>
    </listitem>
    <listitem>
     <para>
      Déclarer une fonction <literal>assert()</literal> dans un espace de noms n'est plus autorisé et 
      lève une erreur <constant>E_COMPILE_ERROR</constant>.
      La fonction <function>assert</function> est soumise à un traitement spécial par le moteur, ce qui 
      peut conduire à un comportement incohérent lors de la définition d'une fonction dans l'espace de 
      noms portant le même nom. 
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.incompatible.resource2object">
  <title>Migration des ressources vers les objets</title>

  <para>
   Plusieurs &resource;s ont été migrées vers des &object;s.
   Les vérifications des valeurs de retour utilisant <function>is_resource</function> doivent être rempalcées 
   par des vérficiations de &false;.
  </para>
  <itemizedlist>
    <listitem>
     <para>
      <function>curl_init</function> renverra désormais un objet <classname>CurlHandle</classname> plutôt 
      qu'une &resource;. La fonction <function>curl_close</function> n'a plus d'effet,
      à la place l'instance de <classname>CurlHandle</classname> est automatiquement détruite si elle 
      n'est plus référencée.
     </para>
    </listitem>
    <listitem>
     <para>
      <function>curl_multi_init</function> va maintenant retourner un objet 
      <classname>CurlMultiHandle</classname> plutôt qu'une &resource;. La fonction
      <function>curl_multi_close</function> n'a plus d'effet, à la place l'instance de 
      <classname>CurlMultiHandle</classname> est automatiquement détruite si elle 
      n'est plus référencée.
     </para>
    </listitem>
    <listitem>
     <para>
      <function>curl_share_init</function> renvoie désormais un objet <classname>CurlShareHandle</classname> 
      plutôt qu'une &resource;. La fonction <function>curl_share_close</function> n'a plus d'effet, à la place
      l'instance de <classname>CurlShareHandle</classname> est automatiquement détruite si elle n'est 
      plus référencée.
     </para>
    </listitem>
   <listitem>
    <para>
     <function>enchant_broker_init</function> retournera désormais un objet <classname>EnchantBroker</classname>
     plutôt qu'une &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_broker_request_dict</function> et
     <function>enchant_broker_request_pwl_dict</function> renverront désormais un objet
     <classname>EnchantDictionary</classname> plutôt qu'une &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     L'extension GD utilise désormais les objets <classname>GdImage</classname> comme structure de données 
     sous-jacente pour les images, plutôt que les &resource;s. La fonction <function>imagedestroy</function> 
     n'a plus d'effet; à la place, l' instance de <classname>GdImage</classname> est automatiquement détruite 
     si elle n'est plus référencée.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_x509_read</function> et <function>openssl_csr_sign</function> retournera désormais un 
     objet <classname>OpenSSLCertificate</classname> plutôt qu'une &resource;.
     La fonction <function>openssl_x509_free</function> est obsolète et n'a plus d'effet,
     à la place l'instance <classname>OpenSSLCertificate</classname> est automatiquement détruite 
     si elle n'est plus référencée.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_csr_new</function> retournera désormais un objet
     <classname>OpenSSLCertificateSigningRequest</classname> plutôt qu'une &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_pkey_new</function> retournera désormais un objet
     <classname>OpenSSLAsymmetricKey</classname> plutôt qu'une &resource;.
     La fonction <function>openssl_pkey_free</function> est obsolète et n'a plus d'effet,
     à la place l'instance <classname>OpenSSLAsymmetricKey</classname> est automatiquement détruite 
     si elle n'est plus référencée.
    </para>
   </listitem>
   <listitem>
     <para>
      <function>shmop_open</function> retournera désormais un objet <classname>Shmop</classname> plutôt 
      qu'une &resource;. La fonction <function>shmop_close</function> est obsolète et n'a plus d'effet; 
      à la place l'instance <classname>Shmop</classname> est automatiquement détruite 
     si elle n'est plus référencée.
     </para>
    </listitem>
   <listitem>
    <para>
     <function>socket_create</function>, <function>socket_create_listen</function>,
     <function>socket_accept</function>, <function>socket_import_stream</function>,
     <function>socket_addrinfo_connect</function>, <function>socket_addrinfo_bind</function>, and
     <function>socket_wsaprotocol_info_import</function> retourneront désormais un objet
     <classname>Socket</classname> plutôt qu'une &resource;.
     <function>socket_addrinfo_lookup</function> retournera désormais un tableau d'objets 
     <classname>AddressInfo</classname> plutôt qu'une &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>msg_get_queue</function> retournera désormais un objet <classname>SysvMessageQueue</classname>
     plutôt qu'une &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>sem_get</function> retournera désormais un objet <classname>SysvSemaphore</classname> 
     plutôt qu'une &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>shm_attach</function> retournera désormais un objet <classname>SysvSharedMemory</classname> 
     plutôt qu'une &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>xml_parser_create</function> et <function>xml_parser_create_ns</function> retourneront 
     désormais un objet <classname>XMLParser</classname> plutôt qu'une &resource;. La fonction
     <function>xml_parser_free</function> est obsolète et n'a plus d'effet; 
      à la place l'instance <classname>XMLParser</classname> est automatiquement détruite 
     si elle n'est plus référencée. 
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions <link linkend="ref.xmlwriter">XMLWriter</link> acceptent et retournent maintenant,
     respectivement des objets <classname>XMLWriter</classname> plutôt qu'une &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>inflate_init</function> retournera désormais un objet <classname>InflateContext</classname> 
     plutôt qu'une &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>deflate_init</function> retournera désormais un objet <classname>DeflateContext</classname> 
     plutôt qu'une &resource;.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.com">
  <title>COM et .Net (Windows)</title>

  <para>
   La possibilité d'importer des constantes insensibles à la casse à partir de bibliothèques de types a 
   été supprimée. Le deuxième argument de <function>com_load_typelib</function> ne peut plus être faux; 
   <link linkend="ini.com.autoregister-casesensitive">com.autoregister_casesensitive</link> ne peut plus 
   être désactivé; les marqueurs insensibles à la casse dans <link linkend="ini.com.typelib-file">com.typelib_file</link> sont ignorés.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.curl">
  <title>CURL</title>

  <para>
   <constant>CURLOPT_POSTFIELDS</constant> n'accepte plus les objets en tant que tableaux. Pour interpréter 
   un objet comme un tableau, effectuez une conversion de type <code>(array)</code> explicite. Il en 
   va de même pour les autres options acceptant les tableaux.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.datetime">
  <title>Date et Heure</title>

  <para>
   <function>mktime</function> et <function>gmmktime</function> nécessitent désormais au moins un 
   argument. <function>time</function> peut être utilisé pour obtenir l'horodatage actuel.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.dom">
  <title>DOM</title>

  <para>
   Les classes non implémentées de l'extension DOM qui n'avaient aucun comportement et contenaient des 
   données de test ont été supprimées. Ces classes ont également été supprimées dans la dernière version 
   du standard DOM:
  </para>
  <para>
   <simplelist>
    <member>DOMNameList</member>
    <member>DomImplementationList</member>
    <member>DOMConfiguration</member>
    <member>DomError</member>
    <member>DomErrorHandler</member>
    <member>DOMImplementationSource</member>
    <member>DOMLocator</member>
    <member>DOMUserDataHandler</member>
    <member>DOMTypeInfo</member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.enchant">
  <title>Enchant</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>enchant_broker_list_dicts</function>, <function>enchant_broker_describe</function> et
     <function>enchant_dict_suggest</function> renverront désormais un tableau vide au lieu de &null;.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.exif">
  <title>Exif</title>

  <para>
   <function>read_exif_data</function> a été supprimé; <function>exif_read_data</function>
   doit être utilisé à la place.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.filter">
  <title>Filter</title>

  <itemizedlist>
   <listitem>
    <para>
     Les indicateurs <constant>FILTER_FLAG_SCHEME_REQUIRED</constant> et
     <constant>FILTER_FLAG_HOST_REQUIRED</constant> pour le filtre
     <constant>FILTER_VALIDATE_URL</constant> ont été supprimés. Le <literal>scheme</literal>
     et <literal>host</literal> sont (et étaient) toujours requis.
    </para>
   </listitem>
   <listitem>
    <para>
     Les sources <constant>INPUT_REQUEST</constant> et <constant>INPUT_SESSION</constant> pour les filtres
     <function>filter_input</function> etc. ont été supprimés. Celles-ci n'ont jamais été implémentées et 
     leur utilisation a toujours généré un avertissement.
    </para> 
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gd">
  <title>GD</title>

  <itemizedlist>
   <listitem>
    <para>
     Les fonctions obsolètes <function>image2wbmp</function> ont été supprimées.
     <!-- RFC: https://wiki.php.net/rfc/image2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions obsolètes <function>png2wbmp</function> et <function>jpeg2wbmp</function> ont 
     été supprimées.
     <!-- RFC: https://wiki.php.net/rfc/deprecate-png-jpeg-2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     Le paramètre par défaut <parameter>mode</parameter> de <function>imagecropauto</function> n'accepte 
     plus <literal>-1</literal>. <constant>IMG_CROP_DEFAULT</constant> doit être utilisée à la place.
    </para>
   </listitem>
   <listitem>
    <para>
     Sur Windows, <filename>php_gd2.dll</filename>a été renommé en <filename>php_gd.dll</filename>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gmp">
  <title>GMP</title>

  <para>
   <function>gmp_random</function> a été supprimé. Soit <function>gmp_random_range</function> ou
   <function>gmp_random_bits</function> doivent être utilisés à la place.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.iconv">
  <title>Iconv</title>

  <para>
   Les implémentations iconv qui ne définissent pas proprement <varname>errno</varname> en cas d'erreurs 
   ne sont plus supportées.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.imap">
  <title>IMAP</title>

  <itemizedlist>
   <listitem>
    <para>
     L'argument inutilisé <parameter>default_host</parameter> de <function>imap_headerinfo</function>
     a été supprimé.
    </para>
   </listitem>
   <listitem>
    <para>
     La fonction <function>imap_header</function> qui est un alias de 
     <function>imap_headerinfo</function> a été supprimé.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.intl">
  <title>Internationalization Functions</title>

  <itemizedlist>
   <listitem>
    <para>
     La constante obsolète <constant>INTL_IDNA_VARIANT_2003</constant> a été supprimée.
     <!-- RFC: https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003 -->
    </para>
   </listitem>
   <listitem>
   <para>
    La constante obsolète <constant>Normalizer::NONE</constant> a été supprimée.
   </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.ldap">
  <title>LDAP</title>

  <itemizedlist>
   <listitem>
   <para>
    Les fonctions obsolètes <function>ldap_sort</function>,
    <function>ldap_control_paged_result</function> et
    <function>ldap_control_paged_result_response</function> ont été supprimées.
   </para>
  </listitem>
  <listitem>
   <para>
    L'interface de <function>ldap_set_rebind_proc</function> a changé; Le paramètre
    <parameter>callback</parameter> n'accepte plus de chaîne vide; &null; doit être utilisé à la place.
   </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.mbstring">
  <title>MBString</title>

  <itemizedlist>
   <listitem>
    <para>
     La directive <link linkend="ini.mbstring.func-overload">mbstring.func_overload</link> a été supprimée. 
     Les constantes relatives <constant>MB_OVERLOAD_MAIL</constant>,
     <constant>MB_OVERLOAD_STRING</constant>, et <constant>MB_OVERLOAD_REGEX</constant> ont été 
     supprimées. Enfin, les entrées <literal>"func_overload"</literal> et
     <literal>"func_overload_list"</literal> dans <function>mb_get_info</function> ont été supprimées.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_parse_str</function> ne peut plus être utilisé sans spécifier un tableau de résultats.
    </para>
   </listitem>
   <listitem>
    <para>
     Un certain nombre d'alias mbregex obsolètes ont été supprimés. Consultez la liste suivante pour savoir 
     quelles fonctions doivent être utilisées à la place:
    </para>
    <para>
     <simplelist>
      <member><function>mbregex_encoding</function> → <function>mb_regex_encoding</function></member>
      <member><function>mbereg</function> → <function>mb_ereg</function></member>
      <member><function>mberegi</function> → <function>mb_eregi</function></member>
      <member><function>mbereg_replace</function> → <function>mb_ereg_replace</function></member>
      <member><function>mberegi_replace</function> → <function>mb_eregi_replace</function></member>
      <member><function>mbsplit</function> → <function>mb_split</function></member>
      <member><function>mbereg_match</function> → <function>mb_ereg_match</function></member>
      <member><function>mbereg_search</function> → <function>mb_ereg_search</function></member>
      <member><function>mbereg_search_pos</function> → <function>mb_ereg_search_pos</function></member>
      <member><function>mbereg_search_regs</function> → <function>mb_ereg_search_regs</function></member>
      <member><function>mbereg_search_init</function> → <function>mb_ereg_search_init</function></member>
      <member><function>mbereg_search_getregs</function> → <function>mb_ereg_search_getregs</function></member>
      <member><function>mbereg_search_getpos</function> → <function>mb_ereg_search_getpos</function></member>
      <member><function>mbereg_search_setpos</function> → <function>mb_ereg_search_setpos</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     Le modificateur <literal>e</literal> pour <function>mb_ereg_replace</function> a été supprimé.
     <function>mb_ereg_replace_callback</function> doit être utilisé à la place.
    </para>
   </listitem>
   <listitem>
    <para>
     Un pattern non-chaîne comme argument de <function>mb_ereg_replace</function> sera désormais interprété 
     comme une chaîne au lieu d'un point de code ASCII. Le comportement précédent peut être restauré avec 
     un appel explicite à <function>chr</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     L'argument <parameter>needle</parameter> pour <function>mb_strpos</function>,
     <function>mb_strrpos</function>, <function>mb_stripos</function>,
     <function>mb_strripos</function>, <function>mb_strstr</function>,
     <function>mb_stristr</function>, <function>mb_strrchr</function> et
     <function>mb_strrichr</function> peut maintenant être vide.
    </para>
   </listitem>
   <listitem>
    <para>
     Le paramètre <parameter>is_hex</parameter>, qui n'a pas été utilisé en interne, a été supprimé de
     <function>mb_decode_numericentity</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     Le comportement hérité consistant à transmettre l'encodage comme troisième argument au lieu d'un 
     décalage pour la fonction <function>mb_strrpos</function> a été supprimé; un index 
     <literal>0</literal> explicite avec le codage doit être fourni comme quatrième argument à la place.
    </para>
   </listitem>
   <listitem>
    <para>
     L'alias d'encodage de caractères <literal>ISO_8859-*</literal> a été remplacé par l'alias
     <literal>ISO8859-*</literal> pour une meilleure interopérabilité avec iconv. Les alias de 
     mbregex ISO 8859 avec underscores  (<literal>ISO_8859_*</literal> et
     <literal>ISO8859_*</literal>) ont également été supprimés.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_ereg</function> et <function>mb_eregi</function> retourne désormais un booléen &true; 
     en cas de correspondance réussie. Auparavant, ils renvoyaient un entier <literal>1</literal> si
     <parameter>matches</parameter> n'était pas passé ou <code>max(1, strlen($matches[0]))</code> si
     <parameter>matches</parameter> était passé.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.oci8">
  <title>OCI8</title>

  <itemizedlist>
   <listitem>
    <para>
     La classe <classname>OCI-Lob</classname> s'appelle desormais <classname>OCILob</classname>, et la 
     classe <classname>OCI-Collection</classname> s'appelle désormais <classname>OCICollection</classname>
     pour la conformité de nom appliquée par l'outil d'annotation de type PHP 8 arginfo.
    </para>
   </listitem>
   <listitem>
    <para>
     Plusieurs fonctions d'alias ont été marquées comme obsolètes.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>oci_internal_debug</function> et son alias <function>ociinternaldebug</function> ont 
     été supprimés.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.odbc">
  <title>ODBC</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>odbc_connect</function> ne réutilise plus les connexions.
    </para>
   </listitem>
   <listitem>
    <para>
     Le paramètre inutilisé <parameter>flags</parameter> de <function>odbc_exec</function> a été supprimé.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.openssl">
  <title>OpenSSL</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>openssl_seal</function> et <function>openssl_open</function> necessitent maintenant qu'une
     <parameter>method</parameter> soit passé, car la valeur par défaut précédente de <literal>"RC4"</literal>
     est considérée comme non sécurisée.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pcre">
  <title>Expressions régulières (compatibles Perl)</title>

  <para>
   Lors du passage de séquences d'échappement non valides, elles ne sont plus interprétées comme des littéraux. 
   Ce comportement nécessitait auparavant le modificateur <literal>X</literal> - qui est maintenant ignoré.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo">
  <title>Objets de données PHP</title>

  <itemizedlist>
   <listitem>
    <para>
     Le mode de gestion des erreurs par défaut est passé de "silencieux" à "exceptions". 
     Voir <link linkend="pdo.error-handling">Erreurs et gestion des erreurs</link> pour plus de détails.
     <!-- RFC: https://wiki.php.net/rfc/pdo_default_errmode -->
    </para>
   </listitem>
   <listitem>
    <para>
     Les signatures de certaines méthodes PDO ont changé:
    </para>
    <para>
     <simplelist>
      <member><code>PDO::query(string $query, ?int $fetchMode  = null, mixed  ...$fetchModeArgs)</code></member>
      <member><code>PDOStatement::setFetchMode(int $mode, mixed ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-odbc">
  <title>PDO ODBC</title>

  <para>
   La directive &php.ini; 
   <link linkend="ini.pdo-odbc.db2-instance-name">pdo_odbc.db2_instance_name</link> a été supprimée.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-mysql">
  <title>PDO MySQL</title>

  <para>
   <methodname>PDO::inTransaction</methodname> rapporte maintenant l'état de transaction réel de la 
   connexion, plutôt qu'une approximation maintenue par PDO. Si une requête est soumise à un "implicit commit" 
   elle est exécutée, <methodname>PDO::inTransaction</methodname> retournera par la suite &false;, 
   car une transaction n'est plus active.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pgsql">
  <title>PostgreSQL</title>

  <itemizedlist>
   <listitem>
    <para>
     La syntaxe obsolète <function>pg_connect</function> utilisant plusieurs paramètres au lieu d'une 
     chaîne de connexion n'est plus prise en charge.
    </para>
   </listitem>
   <listitem>
    <para>
     Les signatures obsolètes <function>pg_lo_import</function> et <function>pg_lo_export</function> qui 
     transmettent la connexion comme dernier argument n'est plus prise en charge. La connexion doit 
     être passée en premier argument à la place.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>pg_fetch_all</function> retournera maintenant un tableau vide au lieu de &false; pour les 
     jeux de résultats avec zéro ligne.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.phar">
  <title>Phar</title>

  <para>
   Les métadonnées associées à un phar ne seront plus automatiquement désérialisées, pour corriger les
   vulnérabilités de sécurité potentielles dues à l'instanciation d'objet, au chargement automatique, etc.
   <!-- RFC: https://wiki.php.net/rfc/phar_stop_autoloading_metadata -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.reflection">
  <title>Reflection</title>

  <itemizedlist>
   <listitem>
    <para>
     Les signatures de méthode
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($args)</code></member>
      <member><code>ReflectionFunction::invoke($args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $args)</code></member>
     </simplelist>
    </para>
    <para>
     ont été modifiés en:
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance(...$args)</code></member>
      <member><code>ReflectionFunction::invoke(...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, ...$args)</code></member>
     </simplelist>
    </para>
    <para>
     Le code qui doit être compatible avec PHP 7 et PHP 8 peut utiliser les signatures suivantes 
     pour être compatible avec les deux versions:
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($arg = null, ...$args)</code></member>
      <member><code>ReflectionFunction::invoke($arg = null, ...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $arg = null, ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     La méthode <methodname>ReflectionType::__toString</methodname> retournera désormais une représentation 
     de débogage complète du type et n'est plus obsolète. En particulier, le résultat inclura un 
     indicateur de nullabilité pour les types Nullable. Le format de la valeur de retour n'est 
     pas stable et peut changer entre les versions de PHP.
    </para>
   </listitem>
   <listitem>
    <para>
     Les méthodes Reflection export() ont été supprimées. Au lieu de cela, 
     les objets de réflexion peuvent être convertis en chaîne.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionMethod::isConstructor</methodname> et
     <methodname>ReflectionMethod::isDestructor</methodname> retournent désormais &true; pour les 
     méthodes <link linkend="object.construct">__construct()</link> et
     <link linkend="object.destruct">__destruct()</link> de interfaces.
     Auparavant, cela n'était vrai que pour les méthodes de classes et de traits.
    </para>
   </listitem>
   <listitem>
    <para>
     La méthode <methodname>ReflectionType::isBuiltin</methodname> a été déplacée vers
     <classname>ReflectionNamedType</classname>. <classname>ReflectionUnionType</classname> n'en a pas.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sockets">
  <title>Sockets</title>

  <itemizedlist>
   <listitem>
    <para>
     Les constantes <constant>AI_IDN_ALLOW_UNASSIGNED</constant> et
     <constant>AI_IDN_USE_STD3_ASCII_RULES</constant> <parameter>flags</parameter> pour
     <function>socket_addrinfo_lookup</function> ont été supprimées.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.spl">
  <title>Standard PHP Library (SPL)</title>

  <itemizedlist>
   <listitem>
    <para>
     <methodname>SplFileObject::fgetss</methodname> a été supprimé.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplFileObject::seek</methodname> cherche désormais toujours au début de la ligne. 
     Auparavant, les positions <literal>=1</literal> cherchaient au début de la ligne suivante.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplHeap::compare</methodname> spécifie maintenant une signature de méthode. 
     L'héritage des classes implémentant cette méthode devra désormais utiliser une signature 
     de méthode compatible.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplDoublyLinkedList::push</methodname>,
     <methodname>SplDoublyLinkedList::unshift</methodname> et
     <methodname>SplQueue::enqueue</methodname> etournent désormais <type>void</type> au lieu de &true;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>spl_autoload_register</function> lévéra désormais toujours une
     <classname>TypeError</classname> sur des arguments non valides, donc le deuxième argument 
     <parameter>do_throw</parameter> est ignoré et un avis sera émis s'il est défini sur &false;.
    </para>
   </listitem>
   <listitem>
    <para>
     <classname>SplFixedArray</classname> est maintenant un <interfacename>IteratorAggregate</interfacename>
     et non un <interfacename>Iterator</interfacename>.
     <methodname>SplFixedArray::rewind</methodname>, <methodname>SplFixedArray::current</methodname>,
     <methodname>SplFixedArray::key</methodname>, <methodname>SplFixedArray::next</methodname>, et
     <methodname>SplFixedArray::valid</methodname> ont été supprimés. À leur place,
     <methodname>SplFixedArray::getIterator</methodname> a été ajouté. Tout code qui utilise une 
     itération explicite sur SplFixedArray doit maintenant obtenir un
     <interfacename>Iterator</interfacename> grâce à
     <methodname>SplFixedArray::getIterator</methodname>. Cela signifie que 
     <classname>SplFixedArray</classname> peut désormais être utilisé en toute sécurité dans les 
     boucles imbriquées.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.standard">
  <title>Bibliothèque standard</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>assert</function> n'évaluera plus les arguments de chaîne, à la place ils seront traités 
     comme n'importe quel autre argument.  <code>assert($a == $b)</code> sdoit être utilisé à la place de
     <code>assert('$a == $b')</code>. The <link
     linkend="ini.assert.quiet-eval">assert.quiet_eval</link> ini directive et la constante
     <constant>ASSERT_QUIET_EVAL</constant> ont également été supprimées, car elles n'auraient plus d'effet.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_str</function> ne peut plus être utilisé sans spécifier un tableau de résultats.
    </para>
   </listitem>
   <listitem>
    <para>
     Le filtre <link linkend="filters.string.strip_tags">string.strip_tags</link> a été supprimé.
    </para>
   </listitem>
   <listitem>
    <para>
     L'argument <parameter>needle</parameter> pour <function>strpos</function>,
     <function>strrpos</function>, <function>stripos</function>, <function>strripos</function>,
     <function>strstr</function>, <function>strchr</function>, <function>strrchr</function>, et
     <function>stristr</function> sera désormais toujours interprété comme une chaîne. Auparavant, 
     les aiguilles sans chaîne étaient interprétées comme un point de code ASCII. Un appel explicite à
     <function>chr</function> peut être utilisé pour restaurer le comportement précédent.
    </para>
   </listitem>
   <listitem>
    <para>
     L'argument <parameter>needle</parameter> pour <function>strpos</function>,
     <function>strrpos</function>, <function>stripos</function>, <function>strripos</function>,
     <function>strstr</function>, <function>stristr</function> et <function>strrchr</function> peut 
     maintenant être vide.
    </para>
   </listitem>
   <listitem>
    <para>
     L'argument <parameter>length</parameter> pour <function>substr</function>,
     <function>substr_count</function>, <function>substr_compare</function>, et
     <function>iconv_substr</function> peut maintenant être &null;. La valeur &null; se comportera comme 
     si aucun argument de longueur n'était fourni et renverra donc le reste de la chaîne au lieu d'une 
     chaîne vide.
    </para>
   </listitem>
   <listitem>
    <para>
     L'argument <parameter>length</parameter> pour <function>array_splice</function> peut maintenant être
     &null;. La valeur &null; se comportera de la même manière que l'omission de l'argument, supprimant 
     ainsi tout de l'<parameter>offset</parameter> à la fin du tableau.
    </para>
   </listitem>
   <listitem>
    <para>
     L'argument <parameter>args</parameter> de <function>vsprintf</function>,
     <function>vfprintf</function>, et <function>vprintf</function> doit maintenant être un tableau. 
     Auparavant, tout type était accepté.
    </para>
   </listitem>
   <listitem>
    <para>
     L'option <literal>'salt'</literal> de <function>password_hash</function> n'est plus prise en charge. Si
     l'option <literal>'salt'</literal> est utilisé, un warning est généré, le "salt" fourni est ignoré et 
     un "salt" généré est utilisé à la place.
    </para>
   </listitem>
   <listitem>
    <para>
     La fonction <function>quotemeta</function> renverra désormais une chaîne vide si une chaîne vide a 
     été transmise. Auparavant &false; été renvoyé.
    </para>
   </listitem>
   <listitem>
    <para>
     Les fonctions suivantes ont été supprimées:
    </para>
    <para>
     <simplelist>
      <member><function>hebrevc</function></member>
      <member><function>convert_cyr_string</function></member>
      <member><function>money_format</function></member>
      <member><function>ezmlm_hash</function></member>
      <member><function>restore_include_path</function></member>
      <member><function>get_magic_quotes_gpc</function></member>
      <member><function>get_magic_quotes_runtime</function></member>
      <member><function>fgetss</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     <constant>FILTER_SANITIZE_MAGIC_QUOTES</constant> a été retiré.
    </para>
   </listitem>
   <listitem>
    <para>
     L'appel d'<function>implode</function> avec des paramètres dans un ordre inverse <code>($pieces,
     $glue)</code> n'est plus pris en charge.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_url</function> distinguera désormais les requêtes et fragments absents et vides:
    </para>
    <para>
     <simplelist>
      <member><code>http://example.com/foo → query = null, fragment = null</code></member>
      <member><code>http://example.com/foo? → query = "",   fragment = null</code></member>
      <member><code>http://example.com/foo# → query = null, fragment = ""</code></member>
      <member><code>http://example.com/foo?# → query = "",   fragment = ""</code></member>
     </simplelist>
      Auparavant, tous les cas entraînaient une requête et un fragment &null;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>var_dump</function> et <function>debug_zval_dump</function> afficheront désormais des 
     nombres à virgule flottante en utilisant <link linkend="ini.serialize-precision">serialize_precision</link>
     plutôt que <link linkend="ini.precision">precision</link>. Dans une configuration par défaut, cela 
     signifie que les nombres à virgule flottante sont maintenant affichés avec une précision totale par 
     ces fonctions de débogage.
    </para>
   </listitem>
   <listitem>
    <para>
     Si le tableau retourné par <link linkend="object.sleep">__sleep()</link> contient des propriétés 
     inexistantes, celles-ci sont désormais ignorées en silence. Auparavant, ces propriétés auraient 
     été sérialisées comme si elles avaient la valeur &null;.
    </para>
   </listitem>
   <listitem>
    <para>
     Les paramètres régionaux par défaut au démarrage sont désormais toujours <literal>"C"</literal>. 
     Aucun paramètre régional n'est hérité de l'environnement par défaut. Auparavant, <constant>LC_ALL</constant>
     était défini sur <literal>"C"</literal>, alors que <constant>LC_CTYPE</constant> était hérité de
     l'environnement. Cependant, certaines fonctions ne respectaient pas les paramètres régionaux hérités 
     sans un appel explicite à <function>setlocale</function>. Un appel explicite à <function>setlocale</function>
     est désormais toujours requis si un composant de locale doit être modifié par rapport à la 
     valeur par défaut.
    </para>
   </listitem>
   <listitem>
    <para>
     Le retour obsolète DES dans <function>crypt</function> a été supprimé. Si un format de sel inconnu 
     est passé àla fonction échouera avec <literal>*0</literal> au lieu de revenir à un hachage DES 
     faible maintenant.
    </para>
   </listitem>
   <listitem>
    <para>
     Spécifier des arrondis hors de portée pour <function>crypt</function> SHA256/SHA512 échouera désormais 
     avec <literal>*0</literal> au lieu de fixer à la limite la plus proche. Cela correspond au comportement 
     de la glibc.
    </para>
   </listitem>
   <listitem>
    <para>
     Le résultat des fonctions de tri peut avoir changé si le tableau contient des éléments qui se 
     comparent comme égaux.
    </para>
   </listitem>
   <listitem>
    <para>
     Toutes les fonctions acceptant des rappels qui ne sont pas explicitement spécifiées pour accepter des
     paramètres par référence avertiront désormais si un rappel avec des paramètres de référence est utilisé. 
     Les exemples incluent <function>array_filter</function> et <function>array_reduce</function>. C'était 
     déjà le cas pour la plupart des fonctions, mais pas toutes auparavant.
    </para>
   </listitem>
   <listitem>
    <para>
     Le wrapper de flux HTTP tel qu'utilisé par des fonctions comme <function>file_get_contents</function> 
     annonce désormais HTTP/1.1 plutôt que HTTP/1.0 par défaut. Cela ne modifie pas le comportement du client, 
     mais peut entraîner une réponse différente des serveurs. Pour conserver l'ancien comportement, 
     définissez l'option <literal>'protocol_version'</literal> de contexte de flux, par exemple
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['http' => ['protocol_version' => '1.0']]);
echo file_get_contents('http://example.org', false, $ctx);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     L'appel de <function>crypt</function> sans sel explicite n'est plus pris en charge. Si vous 
     souhaitez produire un hachage fort avec un sel généré automatiquement, utilisez plutôt
     <function>password_hash</function>.
    </para>
   </listitem>
   <listitem>
    <para>
    <function>substr</function>, <function>mb_substr</function>, <function>iconv_substr</function> et
    <function>grapheme_substr</function> bloquent désormais systématiquement les décalages hors limites 
     par rapport à la limite de la chaîne. Auparavant,&false; était renvoyé à la place de la chaîne 
     vide dans certains cas.
    </para>
   </listitem>
   <listitem>
    <para>
     Sous Windows, les fonctions d'exécution du programme (<function>proc_open</function>,
     <function>exec</function>, <function>popen</function> etc.) utilisant le shell, exécutent 
     désormais systématiquement <command>%comspec% /s
     /c "$commandline"</command>, ce qui a le même effet que l'exécution de 
     <command>$commandline</command> (sans guillemets supplémentaires).
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sysvsem">
  <title>Sysvsem</title>

  <itemizedlist>
   <listitem>
    <para>
     Le paramètre <parameter>auto_release</parameter> de <function>sem_get</function> a été modifié pour 
     accepter les valeurs booléennes plutôt que int.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tidy">
  <title>Tidy</title>

  <itemizedlist>
   <listitem>
    <para>
     Le paramètre <parameter>use_include_path</parameter>, qui n'a pas été utilisé en interne, a été 
     supprimé de <function>tidy_repair_string</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>tidy::repairString</methodname> et <methodname>tidy::repairFile</methodname> sont 
     devenus des méthodes statiques.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tokenizer">
  <title>Tokenizer</title>

  <itemizedlist>
   <listitem>
    <para>
     Les jetons <literal>T_COMMENT</literal> n'incluront plus de nouvelle ligne de fin. La nouvelle ligne 
     fera à la place partie du jeton <literal>T_WHITESPACE</literal> suivant. Il est à noter que ce
     <literal>T_COMMENT</literal> n'est pas toujours suivi d'espaces, il peut aussi être suivi de
     <literal>T_CLOSE_TAG</literal> ou de fin de fichier.
    </para>
   </listitem>
   <listitem>
    <para>
     Les espaces de noms ont désormais représentés à l'aide des jetons <literal>T_NAME_QUALIFIED</literal> 
     (<code>Foo\Bar</code>), <literal>T_NAME_FULLY_QUALIFIED</literal> (<code>\Foo\Bar</code>) et
     <literal>T_NAME_RELATIVE</literal> (<code>namespace\Foo\Bar</code>). <literal>T_NS_SEPARATOR</literal> 
     n'est utilisé que pour les séparateurs d'espaces de noms autonomes, et uniquement syntaxiquement 
     valide en conjonction avec les déclarations d'utilisation de groupe.
     <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlreader">
  <title>XMLReader</title>

  <para>
   <methodname>XMLReader::open</methodname> et <methodname>XMLReader::xml</methodname> sont désormais des 
   méthodes statiques. Elles peuvent toujours être appelées en tant que méthodes d'instance, mais les 
   classes héritées doivent les déclarer comme statiques si elles remplacent ces méthodes.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlrpc">
  <title>XML-RPC</title>

  <para>
   L'extension XML-RPC a été déplacée vers PECL et ne fait plus partie de la distribution PHP.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zip">
  <title>Zip</title>

  <para>
   <constant>ZipArchive::OPSYS_Z_CPM</constant> a été supprimé (ce nom était une faute de frappe). 
   Utilisez <constant>ZipArchive::OPSYS_CPM</constant> plutôt.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zlib">
  <title>Zlib</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>gzgetss</function> a été supprimé.
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="ini.zlib.output-compression">zlib.output_compression</link> n'est plus 
     automatiquement désactivé pour <literal>Content-Type: image/*</literal>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.php-test-packs">
  <title>Packs de test PHP Windows</title>

  <para>
   Le testeur a été renommé de <filename>run-test.php</filename> en
   <filename>run-tests.php</filename>, pour correspondre à son nom dans php-src.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
